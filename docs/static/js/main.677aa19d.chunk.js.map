{"version":3,"sources":["services/authService.ts","components/QRScanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["client_id","a","fetch","URLSearchParams","access_token","toString","method","then","res","json","localStorage","clear","Promise","resolve","success","QRScanner","onChange","React","useState","mode","setMode","val","setVal","onClick","m","delay","onError","err","console","log","onScan","data","style","width","facingMode","App","userData","setUserData","setErr","useEffect","credentials","rawUserData","undefined","message","get","e","alert","className","window","location","href","redirect_uri","origin","response_type","approval_prompt","scope","searchParams","Object","entries","forEach","key","append","getAuthLink","textAlign","lineHeight","padding","float","unAuthorizeAsync","src","photo","name","surname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAMA,G,YAAY,S,4CA6EX,sBAAAC,EAAA,4DACkB,GADlB,SAEOC,MAAM,4CAAD,OACqC,IAAIC,gBAAgB,CAAEC,aAFrD,KAEqEC,YAClF,CAAEC,OAAQ,SACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UALnB,cAMCC,aAAaC,QANd,kBAQQC,QAAQC,QAAQ,CAAEC,SAAS,KARnC,4C,iDC9CQC,EA1B8B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnCC,IAAMC,SAAiC,eADJ,mBACpDC,EADoD,KAC9CC,EAD8C,OAErCH,IAAMC,SAAwB,MAFO,mBAEpDG,EAFoD,KAE/CC,EAF+C,KAc3D,OAAO,gCACH,wBAAQC,QAAS,kBAAMH,GAAQ,SAAAI,GAAC,MAAa,SAATL,EAAkB,cAAgB,WAAtE,mGACA,cAAC,IAAD,CACIM,MAAO,IACPC,QAfY,SAACC,GACjBC,QAAQC,IAAIF,IAeRG,OAZW,SAACC,GACZA,IAASV,IACTL,EAASe,GACTT,EAAOS,KAUPC,MAAO,CAAEC,MAAO,QAChBC,WAAYf,QCiDTgB,MAtDf,WAAgB,IAAD,EACmBjB,mBAAmC,MADtD,mBACNkB,EADM,KACIC,EADJ,OAEqBnB,oBAAS,GAF9B,gCAGSA,mBAAS,KAHlB,mBAGNS,EAHM,KAGDW,EAHC,KA4Bb,OAvBAC,qBAAU,YAEC,uCAAG,8BAAAtC,EAAA,+EAEkBC,MACtB,aACA,CAAEsC,YAAa,YAJX,cAEFC,EAFE,gBAKeA,EAAYhC,OAL3B,QAMiB,KADnB2B,EALE,QAMKtB,QACXuB,OAAYK,GAEZL,EAAYD,EAASL,MATf,kDAaRO,EAAO,KAAaK,SAbZ,0DAAH,qDAgBTC,GAAMrC,SAGL,IAEc,OAAb6B,EACK,6CAAe,cAAC,EAAD,CAAWpB,SAAU,SAAA6B,GAAC,OAAIC,MAAMD,cAGvCH,IAAbN,EAEE,qBAAKW,UAAU,MAAf,SACE,wBAASA,UAAU,YAAYxB,QAAS,kBAAMyB,OAAOC,SAASC,KFnDjE,WACH,IAAMnB,EAAO,CACT/B,YACAmD,aAAc,iCAAiCH,OAAOC,SAASG,OAC/DC,cAAe,OACfC,gBAAkB,OAClBC,MAAO,iBAGLC,EAAe,IAAIrD,gBAGzB,OAFAsD,OAAOC,QAAQ3B,GAAM4B,SAAQ,mCAAEC,EAAF,KAAOvC,EAAP,YAAgBmC,EAAaK,OAAOD,EAAKvC,MAEhE,0CAAN,OAAiDmC,EAAanD,YEuCayD,IAArE,4DAMJ,sBAAKf,UAAU,MAAf,UACGpB,GAAO,4BAAIA,IACZ,sBAAKK,MAAO,CAAC+B,UAAU,OAAQC,WAAY,OAAQC,QAAS,OAA5D,UACE,wBAASjC,MAAO,CAACkC,MAAM,SAAU3C,QAAS,kBFY7C,WAAP,+BEZ0D4C,IAAhD,4CACA,qBAAKC,IAAKhC,EAASiC,MAAOrC,MAAO,CAACkC,MAAM,QAASjC,MAAO,KACxD,gCAAMG,EAASkC,KAAK,uBAAOlC,EAASmC,cALxC,iCAQE,cAAC,EAAD,CAAWvD,SAAU,SAAA6B,GAAC,OAAIjB,QAAQC,IAAIgB,UCxD/B2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnE,MAAK,YAAkD,IAA/CoE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.677aa19d.chunk.js","sourcesContent":["const client_id = '73436';\r\nconst client_secret = 'ba9fb913d81fc6941fe0d6e96011de332fff2697';\r\nconst lsTokenKey = 'snpnz_token';\r\nconst lsUserKey = 'snpnz_user';\r\n\r\nexport function getAuthLink() {\r\n    const data = {\r\n        client_id,\r\n        redirect_uri: 'http://localhost/oauth/?redir='+window.location.origin,\r\n        response_type: 'code',\r\n        approval_prompt : 'auto',\r\n        scope: 'activity:read',\r\n    };\r\n\r\n    const searchParams = new URLSearchParams();\r\n    Object.entries(data).forEach(([key, val]) => searchParams.append(key, val))\r\n\r\n    return `https://www.strava.com/oauth/authorize?${searchParams.toString()}`;\r\n}\r\n\r\nexport async function getAuthTokenAsync() {\r\n    const lsTokenDataStr = localStorage.getItem(lsTokenKey);\r\n\r\n    if (lsTokenDataStr && lsTokenDataStr.length) {\r\n        const tData = JSON.parse(lsTokenDataStr);\r\n        if (tData.expires_at && tData.expires_at * 1000 > Date.now()) {\r\n            return tData.access_token;\r\n        }\r\n\r\n        if (tData.refresh_token) {\r\n\r\n                const result = await fetch(\"https://www.strava.com/api/v3/oauth/token\", {\r\n                    body: new URLSearchParams({\r\n                        client_id,\r\n                        client_secret,\r\n                        refresh_token: tData.refresh_token,\r\n                        grant_type: 'refresh_token'\r\n                    }).toString(),\r\n                    headers: {\r\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                    },\r\n                    method: \"POST\"\r\n                }).then(res => res.json());\r\n                localStorage.setItem(lsTokenKey, JSON.stringify(result));\r\n\r\n                return result.access_token;\r\n        }\r\n\r\n        throw new Error('no token');\r\n    } else {\r\n        throw new Error('no stored token data');\r\n    }\r\n}\r\n\r\nexport async function setAuthTokenByCodeAsync(code:string) {\r\n        const result = await fetch(\"https://www.strava.com/api/v3/oauth/token\", {\r\n            body: new URLSearchParams({\r\n                client_id,\r\n                client_secret,\r\n                code,\r\n                grant_type: 'authorization_code'\r\n            }).toString(),\r\n            headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n            },\r\n            method: \"POST\"\r\n        }).then(res => res.json());\r\n\r\n        console.log({result})\r\n        const { athlete, ...tokenData } = result;\r\n\r\n        localStorage.setItem(lsUserKey, JSON.stringify(athlete));\r\n        localStorage.setItem(lsTokenKey, JSON.stringify(tokenData));\r\n\r\n        return result.access_token;\r\n}\r\n\r\nexport async function unAuthorizeAsync(){\r\n    const access_token = '';\r\n        await fetch(\r\n            `https://www.strava.com/oauth/deauthorize?${new URLSearchParams({ access_token }).toString()}`,\r\n            { method: \"POST\" }\r\n        ).then(res => res.json());\r\n        localStorage.clear();\r\n\r\n        return Promise.resolve({ success: true });\r\n}\r\n\r\nexport function getUser() {\r\n    return JSON.parse(localStorage.getItem(lsUserKey) as string);\r\n}","import React from 'react';\r\nimport QrReader from 'react-qr-reader';\r\ninterface IQRScannerProps {\r\n    onChange: (code: string | null) => void\r\n}\r\nconst QRScanner: React.FC<IQRScannerProps> = ({ onChange }) => {\r\n    const [mode, setMode] = React.useState<'user' | 'environment'>('environment');\r\n    const [val, setVal] = React.useState<string | null>(null);\r\n    const handleError = (err: Error) => {\r\n        console.log(err)\r\n    }\r\n\r\n    const handleScan = (data: string | null) => {\r\n        if (data !== val) {\r\n            onChange(data);\r\n            setVal(data);\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <button onClick={() => setMode(m => mode === 'user' ? 'environment' : 'user')}>Поменять камеру</button>\r\n        <QrReader\r\n            delay={600}\r\n            onError={handleError}\r\n            onScan={handleScan}\r\n            style={{ width: '100%' }}\r\n            facingMode={mode}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default QRScanner;","import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport {\r\n  getAuthLink,\r\n  getAuthTokenAsync,\r\n  setAuthTokenByCodeAsync,\r\n  getUser, unAuthorizeAsync\r\n} from './services/authService';\r\nimport QRScanner from \"./components/QRScanner\";\r\nimport {log} from \"util\";\r\n\r\ninterface IUser {\r\n  \"id\": string;\r\n  \"login\": string;\r\n  \"name\": string;\r\n  \"surname\": string;\r\n  \"photo\": string;\r\n  \"strava_id\": string;\r\n  \"register_date\": string;\r\n}\r\n\r\nfunction App() {\r\n  const [userData, setUserData] = useState<IUser | null | undefined>(null);\r\n  const [dbLoading, setDbLoading] = useState(true);\r\n  const [err, setErr] = useState('');\r\n\r\n  useEffect(() => {\r\n\r\n    const get = async () => {\r\n      try {\r\n        const rawUserData = await fetch(\r\n            '/api/user/',\r\n            { credentials: 'include'});\r\n        const userData = await rawUserData.json();\r\n        if (userData.success === false) {\r\n          setUserData(undefined);\r\n        } else {\r\n          setUserData(userData.data);\r\n        }\r\n\r\n      } catch (e) {\r\n        setErr((e as Error).message);\r\n      }\r\n    }\r\n    get().then();\r\n\r\n\r\n  }, []);\r\n\r\n  if (userData === null) {\r\n    return <div>Loading...<QRScanner onChange={e => alert(e)} /></div>;\r\n  }\r\n\r\n  if (userData === undefined) {\r\n    return (\r\n        <div className=\"App\">\r\n          <button  className=\"bigButton\" onClick={() => window.location.href = getAuthLink()}>Войти в Strava</button>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        {err && <p>{err}</p>}\r\n        <div style={{textAlign:'left', lineHeight: '15px', padding: '8px'}}>\r\n          <button  style={{float:'right'}} onClick={() => unAuthorizeAsync()}>Выйти</button>\r\n          <img src={userData.photo} style={{float:'left'}} width={40} />\r\n          <div>{userData.name}<br />{userData.surname}</div>\r\n        </div>\r\n        Ололо\r\n        <QRScanner onChange={e => console.log(e)} />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}