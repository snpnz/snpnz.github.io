/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ SQL —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {Date} jsDate
 * @returns {string}
 */
export function getSQLDate(jsDate: Date) {
    const timeOffset = new Date().getTimezoneOffset();
    return new Date(jsDate.getTime() - (timeOffset * 60000))
        .toISOString()
        .substr(0, 19)
        .replace('T', ' ');
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ datetime-local –∏–Ω–ø—É—Ç–µ
 * @param {Date} jsDate
 * @returns {string}
 */
export function getInputDate(jsDate: Date) {
    const timeOffset = new Date().getTimezoneOffset();
    return new Date(jsDate.getTime() - (timeOffset * 60000))
        .toISOString()
        .substr(0, 16);
}

const months = ['—è–Ω–≤','—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—É—é –¥–∞—Ç—É
 * @param {Date} jsDate
 * @returns {string}
 */
 export function getHumanDate(jsDate: Date) {
    const d = new Date();
    try {
        const lDade = jsDate.toLocaleDateString();
        const lTime = jsDate.toLocaleTimeString().substring(0, 5);
        if (d.toLocaleDateString() === lDade) {
            return lTime;
        }

        if (d.getFullYear() === jsDate.getFullYear()) {
            return `${jsDate.getDate()}\u2009${months[jsDate.getMonth()]}\u2009–≤\u2009${lTime}`;
        }

        return jsDate.toLocaleDateString();
    } catch (e) {
        console.error(e);
    }

    return 'üóìÔ∏è';
}